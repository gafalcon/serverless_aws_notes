service: notes-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'} #Fetch from sls variable, with dev as default
  region: us-east-1

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoNotesUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoNotesUserPoolClient
  createNote:
    handler: handler.createNote
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    environment:
      NOTES_TABLE_NAME: !Ref notesTable

  updateNote:
    handler: handler.updateNote
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
    environment:
      NOTES_TABLE_NAME: !Ref notesTable

  deleteNote:
    handler: handler.deleteNote
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    environment:
      NOTES_TABLE_NAME: !Ref notesTable

  getAllNotes:
    handler: handler.getAllNotes
    events:
      - http:
          method: get
          path: notes
          authorizer: authorizer
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: !GetAtt notesTable.Arn
  getNote:
    handler: handler.getNote
    events:
      - http:
          method: get
          path: notes/{id}
          authorizer:
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoNotesUserPool.Arn
            # authorizerId:
            #   Ref: ApiGatewayAuthorizer
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt notesTable.Arn
plugins:
  - serverless-iam-roles-per-function
resources:
  - ${file(resources.yml)}
